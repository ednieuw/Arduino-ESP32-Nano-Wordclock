void setup()                                     // ARDUINO Setup
void loop()                                      // ARDUINO Loop
void CheckDevices(void)                          // COMMON Check connected input devices
void EverySecondCheck(void)                      // COMMON Update routine done every second
void EveryMinuteUpdate(void)                     // COMMON Update routine done every minute
void EveryHourUpdate(void)                       // COMMON Update routine done every hour
void EveryDayUpdate(void)                        // COMMON Update routine done every day
void UpdateStatusLEDs(int Toggle)                // COMMON Update routine for the status LEDs
void SetStatusLED(int Red, int Green, int Blue)  // COMMON Control the RGB LEDs on the Nano ESP32
void SetNanoLED13(int intensity)                 // COMMON Control orange LED D13 on the Arduino 
void SetPCBLED09(int intensity)                  // COMMON Control the RGB LED on the PCB
void SetPCBLED10(int intensity)                  // COMMON Control the RGB LED on the PCB
void SerialCheck(void)                           // COMMON check for serial input
void Reset(void)                                 // COMMON Reset to default settings.  BLE On, WIFI NTP Off
void ResetCredentials(void)                      // COMMON Reset to empty credential settings WIFI, NTP, BLE ON
void Tekstprint(char const *tekst)               // COMMON common print routines
void Tekstprintln(char const *tekst)             // COMMON common print routines
void TekstSprint(char const *tekst)              // COMMON common print routines
void TekstSprintln(char const *tekst)            // COMMON common print routines
void WTekstappend(char const *tekst, char const *prefixtekst, char const *suffixtekst, bool newline)
void WTekstprintln(char const *tekst)            // COMMON Print web menu page and BLE menu
void WTekstprintln(char const *tekst, char const *prefixtekst, char const *suffixtekst) 
void WTekstprint(char const *tekst)              // COMMON Print web menu page and BLE menu
void WTekstprint(char const *tekst, char const *prefixtekst, char const *suffixtekst) 
int SConstrainInt(String s,byte first,byte last,int low,int up)         // COMMON Constrain a string with integers
int SConstrainInt(int SConstrainInt(String s,byte first,int low,int up) // COMMON Constrain a string with integers
void InitStorage(void)                           // COMMON Init and check contents of EEPROM
void StoreStructInFlashMemory(void)              // COMMON Store mem.struct in FlashStorage or SD
void GetStructFromFlashMemory(void)              // COMMON Get data from FlashStorage
void SWversion(void)                             // COMMON Version info
void SWversion(bool small)                       // COMMON small Version info
void PrintLine(byte Lengte)                      // COMMON PrintLine
void ReworkInputString(String InputString)     // COMMON Input from Bluetooth, Serial or HTML page
int ReadLDR(void)                                // LDR reading are between 0 and 255. 
void SetSecondColour(void)                       // CLOCK Set second colour
void SetColours(void)                            // CLOCK Set second for 4 language clock
void Selftest(void)                              // CLOCK Self test sequence
void Selftest(int Delayms)                       // CLOCK Self test sequence
void Displaytime()                               // CLOCK Say the time and load the LEDs 
void DimLeds(bool print)                         // CLOCK Dim the leds measured by the LDR and print values
void Play_Lights()                               // CLOCK Turn On en Off the LED's
void BlinkUUR(int NoofBlinks, int Delayms)       // CLOCK Blink UUR
void BlinkHETISWAS (int NoofBlinks, int Delayms) // CLOCK Blink HET IS WAS
void BlinkTWAALF(int NoofBlinks, int Delayms)    // CLOCK Blink TWAALF
void ColorLeds(char const *Tekst, int FirstLed, int LastLed, uint32_t RGBWColor)// LED Set color for LEDs in strip and print tekst
void ColorLed(int Lednr, uint32_t RGBWColor)     //  LED Set color for one LED
void LedsOff(void)                               // LED Clear display settings of the LEDs
void Laatzien(int Delaymsec)                     // LED Turn On and  the LED's Off after Delaymsec milliseconds
void ShowLeds(void)                              // LED Push data in LED strip to commit the changes
void SetBrightnessLeds(byte Bright)              // LED Set brighness of LEDs
void Stripfill(uint32_t RGBWColor, int FirstLed, int NoofLEDs)   //  LED Fill the strip array
uint32_t StripGetPixelColor(int Lednr)           // LED Strip Get Pixel Color 
void LEDstartup(uint32_t LEDColour)              // LED Synchronize the colour of the LEDstrip with the Status LED
uint32_t HSVToRGB(double H, double S, double V)  // LED convert HSV to RGB
uint32_t FuncCRGBW( uint32_t Red, uint32_t Green, uint32_t Blue, uint32_t White)  //  LED function to make RGBW colour
uint8_t Cwhite(uint32_t c)                       // LED functions to extract RGBW colours
uint8_t Cred(  uint32_t c)                       // LED functions to extract RGBW colours
uint8_t Cgreen(uint32_t c)                       // LED functions to extract RGBW colours
uint8_t Cblue( uint32_t c)                       // LED functions to extract RGBW colours
void ClearScreen(void)                           // DISPLAY Clear the display
uint32_t Wheel(byte WheelPos)                    // DISPLAY Wheel The colours are a transition r - g - b - back to r
void StartLeds(void)                             // DISPLAY Initialyse the LEDstrip for WS2812 or SK6812 LEDs
void RainbowCycle(uint8_t wait)                  // DISPLAY RainbowCycle
void WhiteOverRainbow(uint32_t wait, uint8_t whiteSpeed, uint32_t whiteLength )    // DISPLAY WhiteOverRainbow
void Zet_Pixel(byte Cijfer,byte Pos_X, byte Pos_Y)// DISPLAY Place digits 0 - 9 in Matrix display
void TimePlaceDigit(byte uur, byte minuut)       // DISPLAY Time in four digits in display
void WriteLightReducer(int amount)               // CLOCK In- or decrease light intensity value i.e. Slope
time_t GetTijd(bool printit)                     // RTC Get time from NTP cq internal ESP32 RTC 
void GetNTPtime(bool printit)                    // NTP print the NTP time for the timezone set 
void PrintNTPtime(void)                          // NTP print the NTP time for the timezone set 
void PrintUTCtime(void)                          // NTP print the NTP UTC time 
void InitDS3231Mod(void)                         // DS3231 Init module
bool IsDS3231I2Cconnected(void)                  // DS3231 check for I2C connection
float GetDS3231Temp(void)                        // DS3231 Get temperature from DS3231 module
void SetDS3231Time(void)                         // DS3231 Set time in module DS3231
void GetDS3231Time(bool printit)                 // DS3231 reads time in module DS3231
void PrintDS3231Time(void)                       // DS3231 prints time to serial
void PrintRTCTime(void)                          // RTC prints the ESP32 internal RTC time to serial
void PrintTimeHMS()                              // RTC Fill sptext with time with linefeed
void PrintTimeHMS(byte format)                   // RTC Fill sptext with time. 1 no LF, 2 LF
void SetRTCTime(void)                            // RTC Set time using global timeinfo struct
void SetRTCTime(time_t t)                        // RTC Set RTC time using Unix timestamp
void PrintAllClockTimes(void)                    // CLOCK Print all the times available 
uint32_t HexToDec(const String& hexString)       // CLOCK Convert Hex to uint32
void Demomode(void)                              // CLOCK Demo mode
void FireMode(void)                              // CLOCK Demo mode
uint8_t heat[MATRIX_HEIGHT][MATRIX_WIDTH];       // 2D heat map
void Fire2023_2D()                               // CLOCK Demo mode
void Dutch(void)                                 // CLOCK Dutch clock display
void English(void)                               // CLOCK English clock display
void German(void)                                // CLOCK German clock display
void French(void)                                // CLOCK French clock display
void SendMessageBLE(std::string Message)         // BLE SendMessage by BLE 
class MyServerCallbacks:                         // BLE Start BLE Classes 
class MyCallbacks:                               // BLE Start BLE Classes
void StartBLEService(void)                       // BLE Start BLE Service
void CheckBLE(void)                              // BLE CheckBLE input and rework string
void WiFiEvent(WiFiEvent_t event)                // WIFI WIFIEvents
bool CheckforWIFINetwork(void)                   // WIFI Check for WIFI Network 
bool CheckforWIFINetwork(bool PrintIt)           // WIFI Check for WIFI Network and print it
void ScanWIFI(void)                              // WIFI Scan for WIFI stations
void ConnectWIFI(void)                           // WIFI Check for WIFI router SSID and password 
void StartWIFI_NTP(void)                         // WIFI Start WIFI connection and NTP service
void WebServerTask(void *pvParameters)           // WIFI WebServerTask  on core 1
void NTPnotify(struct timeval* t)                // NTP time synchronized
void setTimezone()                               // NTP set timezone
void initSNTP()                                  // NTP set timezone
bool wait4SNTP()                                 // NTP wait max 4 seconds
void WebPage(void)                               // WIFI WEBPAGE 
void StartAPMode(void)                           // WIFI WEBPAGE Login credentials Access Point page with 192.168.4.1
void wpsInitConfig()                             // WIFI WPS functions
void wpsStart()                                  // WIFI WPS functions
void wpsStop()                                   // WIFI WPS functions
String wpspin2string(uint8_t a[])                // WIFI WPS functions
void OnewireKeypad3x4Check(void)                 // KEYPAD check for Onewire Keypad input
void OnewireKeypad3x1Check(void)                 // KEYPAD check for Onewire Keypad input 
void InitKeypad3x1(void)                         // KEYPAD 3x1 Init 
void Keypad3x1Check(void)                        // KEYPAD check for Keypad input
void InitRotaryMod(void)                         // KY-040 ROTARY encoder Init 
void RotaryEncoderCheck(void)                    // KY-040 ROTARY check if the rotary is moving
void ProcessKeyPressTurn(int encoderPos)         // CLOCK KY-040 Rotary or Membrane 3x1 processing input


